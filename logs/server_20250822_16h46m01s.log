2025-08-22 16:46:01 - root - INFO - 服务器日志系统初始化完成，日志文件: C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\logs\server_20250822_16h46m01s.log
2025-08-22 16:46:01 - uvicorn.error - INFO - Started server process [3220]
2025-08-22 16:46:01 - uvicorn.error - INFO - Waiting for application startup.
2025-08-22 16:46:01 - back_end.server - INFO - FastAPI应用启动
2025-08-22 16:46:01 - uvicorn.error - INFO - Application startup complete.
2025-08-22 16:46:13 - back_end.server - INFO - the html file is stored at: uploads\LicenseInfo-@automation-core_ac-engineering-ng-2.10.0-2025-07-30_05_57_51.html
2025-08-22 16:46:13 - nodes - INFO - Now we are parsing the original HTML File
2025-08-22 16:46:13 - nodes - INFO - Successfully parsed!
2025-08-22 16:46:13 - nodes - INFO - Now we are reviewing the components list
2025-08-22 16:46:13 - nodes - INFO - We have 3 to review
2025-08-22 16:46:25 - utils.tools - INFO - we should have result like {'LicenseName': 'Apache-2.0', 'CredentialOrNot': False}
2025-08-22 16:46:27 - nodes - INFO - We have reviewed one component
2025-08-22 16:46:38 - utils.tools - INFO - we should have result like {'LicenseName': 'CC-BY-4.0', 'CredentialOrNot': False}
2025-08-22 16:46:40 - nodes - INFO - We have reviewed one component
2025-08-22 16:46:51 - utils.tools - INFO - we should have result like {'LicenseName': '3: MIT⇧', 'CredentialOrNot': False}
2025-08-22 16:46:52 - nodes - INFO - We have reviewed one component
2025-08-22 16:46:52 - nodes - INFO - Completely Reviewed.
2025-08-22 16:46:52 - nodes - INFO - Now we are collecing special licenses such as GPL
2025-08-22 16:46:52 - nodes - INFO - Now checking the reviewed risks
2025-08-22 16:46:52 - nodes - INFO - We have 3 licenses to check
2025-08-22 16:46:52 - nodes - INFO - Successfully combined 3 license and risk records
2025-08-22 16:47:07 - nodes - INFO - We have checked one component
2025-08-22 16:47:17 - nodes - INFO - We have checked one component
2025-08-22 16:47:26 - nodes - INFO - We have checked one component
2025-08-22 16:47:26 - nodes - INFO - finished checking, now we are checking the dependecies
2025-08-22 16:47:26 - nodes - INFO - now we start analyzing depencies between components
2025-08-22 16:47:33 - utils.tools - INFO - we should have result like {'compName': '@ngrx/store 17.2.0', 'dependency': True}
2025-08-22 16:47:33 - nodes - INFO - Now we have checked dependency of one component
2025-08-22 16:47:33 - utils.itemFilter - INFO - 开始筛选组件，共 1 个组件待处理
2025-08-22 16:47:33 - utils.itemFilter - INFO - 处理组件 1/1
2025-08-22 16:47:33 - utils.itemFilter - INFO - 正在检查组件: @ngrx/store 17.2.0
                            ⇧
2025-08-22 16:47:33 - utils.itemFilter - INFO - 组件许可证列表: ["Apache-2.0", "CC-BY-4.0", "MIT"]
2025-08-22 16:47:33 - utils.itemFilter - INFO - 风险分析中的许可证: ["Apache-2.0", "CC-BY-4.0", "MIT", "3: MIT⇧"]
2025-08-22 16:47:33 - utils.itemFilter - INFO - 筛选完成，保留了 1 个需要凭证的组件
2025-08-22 16:47:33 - nodes - INFO - finished checking, now we are starting the chat...
2025-08-22 16:47:37 - nodes - INFO - Initialized session successfully, waiting for the bot to start conversation
2025-08-22 16:47:37 - nodes - INFO - Starting Chatting...
2025-08-22 16:47:37 - back_end.services.chat_service - INFO - we have found risk bot when initializing the chat service!
2025-08-22 16:47:37 - back_end.services.chat_manager - WARNING - now we start with checking: component
2025-08-22 16:47:39 - utils.tools - INFO - we should have result like {'result': 'continue', 'is_oem_approved': None, 'talking': 'OEM (Original Equipment Manufacturer) refers to companies that produce components or equipment that are used in products sold by another company under their own brand name. Is your project intended for OEM integration? Please answer yes or no.'}
2025-08-22 16:47:39 - back_end.server - INFO - now we initialized status as: OEMing
2025-08-22 16:47:58 - back_end.server - INFO - server: before processing input, we are in the status of: OEMing
2025-08-22 16:48:00 - utils.tools - INFO - we should have result like {'result': 'next', 'is_oem_approved': True, 'talking': 'Thank you for confirming that your project involves OEM integration.'}
2025-08-22 16:48:00 - back_end.services.chat_service - INFO - user_input: yes

2025-08-22 16:48:00 - back_end.services.state_handlers.object_handler - WARNING - OEM handler received invalid result type: <class 'str'>
2025-08-22 16:48:00 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.OEM
2025-08-22 16:48:00 - OEMStateHandler - INFO - Now we are checking...
2025-08-22 16:48:00 - back_end.services.chat_flow - INFO - chat_flow.process: 状态转移: ConfirmationStatus.OEM -> ConfirmationStatus.CONTRACT
2025-08-22 16:48:00 - back_end.services.chat_service - INFO - chat_service.process_user_input: Current status: OEMing, Updated status: toContract
2025-08-22 16:48:00 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: OEMing -> toContract
2025-08-22 16:48:00 - back_end.items_utils.item_types - WARNING - 最新状态为toContract，未找到处理类型(processing_type)，使用默认值: component
2025-08-22 16:48:01 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': 'Contracts are important legal documents that govern relationships with third-party vendors, clarifying the rights, obligations, and responsibilities of both parties. Do you have a formal contract with the vendor of this third-party component? Please answer yes or no, or explain if there are other circumstances.'}
2025-08-22 16:48:05 - back_end.server - INFO - server: before processing input, we are in the status of: toContract
2025-08-22 16:48:06 - utils.tools - INFO - we should have result like {'result': 'next', 'talking': 'Thank you for your response. It appears you do not have a formal contract with the vendor of the third-party component.'}
2025-08-22 16:48:06 - back_end.services.chat_service - INFO - user_input: no

2025-08-22 16:48:06 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.CONTRACT
2025-08-22 16:48:06 - ContractHandler - INFO - Now we are checking...
2025-08-22 16:48:06 - back_end.services.chat_flow - INFO - chat_flow.process: 状态转移: ConfirmationStatus.CONTRACT -> ConfirmationStatus.DEPENDENCY
2025-08-22 16:48:06 - back_end.services.state_handlers.object_handler - INFO - chat_flow.DependencyCheck: 依赖处理: 初始化了 1 个组件子任务
2025-08-22 16:48:06 - back_end.services.chat_service - INFO - chat_service.process_user_input: Current status: toContract, Updated status: toDependency
2025-08-22 16:48:06 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: toContract -> toDependency
2025-08-22 16:48:08 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': 'Third-party components often have their own dependencies (libraries, frameworks, or modules they rely on), which can introduce additional compliance risks and licensing obligations. Including dependencies in the clearance ensures comprehensive risk assessment. Would you like to include the dependent components of this third-party component in your compliance clearance list? Please answer yes or no.'}
2025-08-22 16:48:14 - back_end.server - INFO - server: before processing input, we are in the status of: toDependency
2025-08-22 16:48:16 - utils.tools - INFO - we should have result like {'result': 'next', 'talking': 'Thank you for confirming that you want to include the dependent components in your compliance clearance list.'}
2025-08-22 16:48:16 - back_end.services.chat_service - INFO - user_input: yes

2025-08-22 16:48:16 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.DEPENDENCY
2025-08-22 16:48:16 - back_end.services.chat_service - INFO - chat_service.process_user_input: Current status: toDependency, Updated status: toDependency
2025-08-22 16:48:16 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: toDependency -> toDependency
2025-08-22 16:48:16 - back_end.services.chat_service - INFO - chat_service.handle_nested: now the processing type in shared is: component
2025-08-22 16:48:16 - back_end.services.chat_service - INFO - chat_service.handle_nested: now we are handling license or component ItemType.COMPONENT
2025-08-22 16:48:16 - back_end.services.chat_manager - INFO - chat_manager.handle_next: now we return back to handling continue function
2025-08-22 16:48:17 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': 'The component @ngrx/store 17.2.0 has its own dependencies which may also need compliance assessment. Would you like to add these dependent components into your compliance checklist? Please answer yes or no.'}
2025-08-22 16:48:17 - back_end.services.chat_service - WARNING - chat_service.handle_nested: we have found this messsage The component @ngrx/store 17.2.0 has its own dependencies which may also need compliance assessment. Would you like to add these dependent components into your compliance checklist? Please answer yes or no.
2025-08-22 16:48:19 - back_end.server - INFO - server: before processing input, we are in the status of: toDependency
2025-08-22 16:48:21 - utils.tools - INFO - we should have result like {'result': 'next', 'talking': 'Thank you for confirming that you want to add the dependent components of @ngrx/store 17.2.0 into your compliance checklist.'}
2025-08-22 16:48:21 - back_end.services.chat_service - INFO - user_input: yes

2025-08-22 16:48:21 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.DEPENDENCY
2025-08-22 16:48:21 - back_end.services.chat_service - INFO - chat_service.process_user_input: Current status: toDependency, Updated status: toDependency
2025-08-22 16:48:21 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: toDependency -> toDependency
2025-08-22 16:48:21 - back_end.services.chat_service - INFO - chat_service.handle_nested: now the processing type in shared is: component
2025-08-22 16:48:21 - back_end.services.chat_service - INFO - chat_service.handle_nested: now we are handling license or component ItemType.COMPONENT
2025-08-22 16:48:21 - back_end.services.chat_manager - INFO - chat_manager: updated item status to confirmed
2025-08-22 16:48:21 - back_end.services.chat_service - WARNING - chat_service.handle_nested: we have found this messsage @ngrx/store 17.2.0 has been confirmed!

We have finished current checking!
2025-08-22 16:48:21 - back_end.services.chat_service - INFO - chat_service.handle_nested: we have finished the checking for this state toDependency
2025-08-22 16:48:21 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.DEPENDENCY
2025-08-22 16:48:21 - back_end.services.chat_flow - INFO - chat_flow.process: 状态转移: ConfirmationStatus.DEPENDENCY -> ConfirmationStatus.MAINLICENSE
2025-08-22 16:48:21 - back_end.services.state_handlers.object_handler - INFO - chat_flow.CredentialCheck: 依赖处理: 初始化了 1 个组件子任务
2025-08-22 16:48:21 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: toDependency -> main_license
2025-08-22 16:48:23 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': 'You are now in the stage where you should select the main license for your components. Please provide your component list along with their respective licenses.'}
2025-08-22 16:48:23 - back_end.services.chat_service - INFO - process_status_change: we need to get the instruction for the first item: main_license
2025-08-22 16:48:25 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': "I've recorded your component licenses: ['Apache-2.0', 'CC-BY-4.0', 'MIT']. Please select which should be the main license by number or name."}
2025-08-22 16:48:31 - back_end.server - INFO - server: before processing input, we are in the status of: main_license
2025-08-22 16:48:34 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': "You've selected Apache-2.0 as the main license. Is this correct?"}
2025-08-22 16:48:34 - back_end.services.chat_service - INFO - user_input: apache

2025-08-22 16:48:34 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.MAINLICENSE
2025-08-22 16:48:34 - back_end.server - ERROR - Error during chat: 'NoneType' object has no attribute 'get'
Traceback (most recent call last):
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\server.py", line 212, in chat
    status, updated_shared, reply = chat_service.process_user_input(
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        session["shared"],
        ^^^^^^^^^^^^^^^^^^
        chat_message.message,
        ^^^^^^^^^^^^^^^^^^^^^
        status
        ^^^^^^
    )
    ^
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\chat_service.py", line 47, in process_user_input
    updated_status = self.chat_flow.process(content).value
                     ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\chat_flow.py", line 148, in process
    event = handler.handle(context)
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\state_handlers\base_handler.py", line 139, in handle
    if self.check_all_subtasks_completed(context):
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\state_handlers\base_handler.py", line 164, in check_all_subtasks_completed
    return all(self.is_subtask_completed(context, task_id) for task_id in self.subtasks)
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\state_handlers\base_handler.py", line 164, in <genexpr>
    return all(self.is_subtask_completed(context, task_id) for task_id in self.subtasks)
               ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\state_handlers\object_handler.py", line 102, in is_subtask_completed
    components = get_items_from_context(context, ItemType.MAINLICENSE)
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\items_utils\item_utils.py", line 17, in get_items_from_context
    return context.get("shared", {}).get(items_key, [])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
2025-08-22 16:48:34 - utils.tools - ERROR - Error CHAT_ERROR: Error during contract analysis: 'NoneType' object has no attribute 'get'
2025-08-22 16:54:54 - back_end.server - INFO - the html file is stored at: uploads\LicenseInfo-@automation-core_ac-engineering-ng-2.10.0-2025-07-30_05_57_51.html
2025-08-22 16:54:54 - nodes - INFO - Now we are parsing the original HTML File
2025-08-22 16:54:54 - nodes - INFO - Successfully parsed!
2025-08-22 16:54:54 - nodes - INFO - Now we are reviewing the components list
2025-08-22 16:54:54 - nodes - INFO - We have 3 to review
2025-08-22 16:55:05 - utils.tools - INFO - we should have result like {'LicenseName': 'Apache-2.0', 'CredentialOrNot': False}
2025-08-22 16:55:07 - nodes - INFO - We have reviewed one component
2025-08-22 16:55:19 - utils.tools - INFO - we should have result like {'LicenseName': 'CC-BY-4.0', 'CredentialOrNot': False}
2025-08-22 16:55:21 - nodes - INFO - We have reviewed one component
2025-08-22 16:55:32 - utils.tools - INFO - we should have result like {'LicenseName': '3: MIT', 'CredentialOrNot': False}
2025-08-22 16:55:34 - nodes - INFO - We have reviewed one component
2025-08-22 16:55:34 - nodes - INFO - Completely Reviewed.
2025-08-22 16:55:34 - nodes - INFO - Now we are collecing special licenses such as GPL
2025-08-22 16:55:34 - nodes - INFO - Now checking the reviewed risks
2025-08-22 16:55:34 - nodes - INFO - We have 3 licenses to check
2025-08-22 16:55:34 - nodes - INFO - Successfully combined 3 license and risk records
2025-08-22 16:55:43 - nodes - INFO - We have checked one component
2025-08-22 16:55:53 - nodes - INFO - We have checked one component
2025-08-22 16:56:02 - nodes - INFO - We have checked one component
2025-08-22 16:56:02 - nodes - INFO - finished checking, now we are checking the dependecies
2025-08-22 16:56:02 - nodes - INFO - now we start analyzing depencies between components
2025-08-22 16:56:10 - utils.tools - INFO - we should have result like {'compName': '@ngrx/store 17.2.0', 'dependency': True}
2025-08-22 16:56:10 - nodes - INFO - Now we have checked dependency of one component
2025-08-22 16:56:10 - utils.itemFilter - INFO - 开始筛选组件，共 1 个组件待处理
2025-08-22 16:56:10 - utils.itemFilter - INFO - 处理组件 1/1
2025-08-22 16:56:10 - utils.itemFilter - INFO - 正在检查组件: @ngrx/store 17.2.0
                            ⇧
2025-08-22 16:56:10 - utils.itemFilter - INFO - 组件许可证列表: ["Apache-2.0", "CC-BY-4.0", "MIT"]
2025-08-22 16:56:10 - utils.itemFilter - INFO - 风险分析中的许可证: ["Apache-2.0", "CC-BY-4.0", "MIT", "3: MIT"]
2025-08-22 16:56:10 - utils.itemFilter - INFO - 筛选完成，保留了 1 个需要凭证的组件
2025-08-22 16:56:10 - nodes - INFO - finished checking, now we are starting the chat...
2025-08-22 16:56:13 - nodes - INFO - Initialized session successfully, waiting for the bot to start conversation
2025-08-22 16:56:13 - nodes - INFO - Starting Chatting...
2025-08-22 16:56:13 - back_end.services.chat_service - INFO - we have found risk bot when initializing the chat service!
2025-08-22 16:56:13 - back_end.services.chat_manager - WARNING - now we start with checking: component
2025-08-22 16:56:16 - utils.tools - INFO - we should have result like {'result': 'continue', 'is_oem_approved': False, 'talking': 'OEM (Original Equipment Manufacturer) refers to companies that produce components or equipment that are used in products sold by another company under their own brand name. Is your project intended for OEM integration? Please answer yes or no.'}
2025-08-22 16:56:16 - back_end.server - INFO - now we initialized status as: OEMing
2025-08-22 16:56:28 - back_end.server - INFO - server: before processing input, we are in the status of: OEMing
2025-08-22 16:56:31 - utils.tools - INFO - we should have result like {'result': 'next', 'is_oem_approved': True, 'talking': 'Thank you for confirming that your project involves OEM integration. If you have any specific compliance questions or need further assistance regarding OSS or PSS components related to your OEM integration, please let me know!'}
2025-08-22 16:56:31 - back_end.services.chat_service - INFO - user_input: yes

2025-08-22 16:56:31 - back_end.services.state_handlers.object_handler - WARNING - OEM handler received invalid result type: <class 'str'>
2025-08-22 16:56:31 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.OEM
2025-08-22 16:56:31 - OEMStateHandler - INFO - Now we are checking...
2025-08-22 16:56:31 - back_end.services.chat_flow - INFO - chat_flow.process: 状态转移: ConfirmationStatus.OEM -> ConfirmationStatus.CONTRACT
2025-08-22 16:56:31 - back_end.services.chat_service - INFO - chat_service.process_user_input: Current status: OEMing, Updated status: toContract
2025-08-22 16:56:31 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: OEMing -> toContract
2025-08-22 16:56:31 - back_end.items_utils.item_types - WARNING - 最新状态为toContract，未找到处理类型(processing_type)，使用默认值: component
2025-08-22 16:56:32 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': 'Contracts are important legal documents that govern relationships with third-party vendors, clarifying the rights, obligations, and responsibilities of both parties. Do you have a formal contract with the vendor of this third-party component? Please answer yes or no, or explain if there are other circumstances.'}
2025-08-22 16:56:43 - back_end.server - INFO - The file is stored at: uploads\contract_template.docx
2025-08-22 16:56:43 - utils.tools - ERROR - Attempt 1 to get valid JSON response
2025-08-22 16:56:49 - utils.tools - INFO - we should have result like {'result': 'next', 'talking': {'oss_risks': {'components_identified': 'The contract states that all OSS components must be documented in an OSS Bill of Materials (BOM). However, specific OSS components are not listed in the provided text.', 'license_compliance': 'The Developer is responsible for ensuring OSS integration complies with their respective licenses, such as providing source code and attribution notifications as required.', 'discrepancies': 'Potential risks arise if the OSS components are not tracked and validated for license compliance before integration. There is a specific mandate for compliance tracking which must be adhered to.', 'risk_mitigation': 'To mitigate risks, the Developer should maintain an accurate and updated OSS BOM, conduct regular audits of OSS components for compliance, and ensure proper documentation is available.', 'auditing_rights': 'Clients retain the right to audit OSS compliance, thereby providing a measure of oversight.'}, 'pss_risks': {'components_identified': 'The contract specifies that all proprietary code, algorithms, and documentation created under this Agreement shall be the exclusive property of the Client.', 'licensing_review': 'The Developer is mandated to conduct a Freedom-to-Operate (FTO) analysis for OSS components, which indirectly emphasizes the necessity of reviewing proprietary software usage.', 'contractual_obligations': 'The warranty sections outline obligations related to the functionality of software and rights to license OSS components. Contractual obligations concerning proprietary software use seem adequately addressed.', 'compliance_recommendations': 'The Developer should ensure to keep robust records of proprietary software licenses, routinely verify compliance with the terms, and avoid using prohibited software without necessary rights.', 'areas_of_concern': 'There may be unaddressed concerns regarding the interaction of OSS with proprietary software if not explicitly isolated as stated in the Developer’s responsibilities.'}}}
2025-08-22 16:56:49 - back_end.server - INFO - Contract analysis completed successfully for session caa3fbf7-45c9-471e-9572-3dbcf3d374c8
2025-08-22 16:56:49 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.CONTRACT
2025-08-22 16:56:49 - ContractHandler - INFO - Now we are checking...
2025-08-22 16:56:49 - back_end.services.chat_flow - INFO - chat_flow.process: 状态转移: ConfirmationStatus.CONTRACT -> ConfirmationStatus.DEPENDENCY
2025-08-22 16:56:49 - back_end.services.state_handlers.object_handler - INFO - chat_flow.DependencyCheck: 依赖处理: 初始化了 1 个组件子任务
2025-08-22 16:56:49 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: toContract -> toDependency
2025-08-22 16:56:52 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': 'Third-party components often have their own dependencies (libraries, frameworks, or modules they rely on), which can introduce additional compliance risks and licensing obligations. Including dependencies in the clearance ensures comprehensive risk assessment. Would you like to include the dependent components of this third-party component in your compliance clearance list? Please answer yes or no.'}
2025-08-22 16:56:55 - back_end.server - INFO - server: before processing input, we are in the status of: toDependency
2025-08-22 16:56:58 - utils.tools - INFO - we should have result like {'result': 'next', 'talking': 'Including dependent components in the compliance clearance list is crucial as it allows for a thorough examination of all potential compliance risks associated with both the primary third-party component and its dependencies. This ensures a more comprehensive risk assessment and helps avoid any licensing violations.'}
2025-08-22 16:56:58 - back_end.services.chat_service - INFO - user_input: yes

2025-08-22 16:56:58 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.DEPENDENCY
2025-08-22 16:56:58 - back_end.services.chat_service - INFO - chat_service.process_user_input: Current status: toDependency, Updated status: toDependency
2025-08-22 16:56:58 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: toDependency -> toDependency
2025-08-22 16:56:58 - back_end.services.chat_service - INFO - chat_service.handle_nested: now the processing type in shared is: component
2025-08-22 16:56:58 - back_end.services.chat_service - INFO - chat_service.handle_nested: now we are handling license or component ItemType.COMPONENT
2025-08-22 16:56:58 - back_end.services.chat_manager - INFO - chat_manager.handle_next: now we return back to handling continue function
2025-08-22 16:56:59 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': 'The component @ngrx/store version 17.2.0 may have several dependent components that could bring in additional compliance risks. To ensure all potential risks are adequately assessed, do you want to add the dependent components of @ngrx/store into the compliance clearance checklist? Please answer yes or no.'}
2025-08-22 16:56:59 - back_end.services.chat_service - WARNING - chat_service.handle_nested: we have found this messsage The component @ngrx/store version 17.2.0 may have several dependent components that could bring in additional compliance risks. To ensure all potential risks are adequately assessed, do you want to add the dependent components of @ngrx/store into the compliance clearance checklist? Please answer yes or no.
2025-08-22 16:57:03 - back_end.server - INFO - server: before processing input, we are in the status of: toDependency
2025-08-22 16:57:04 - utils.tools - INFO - we should have result like {'result': 'next', 'talking': 'Great! We will include the dependent components of @ngrx/store in the compliance clearance checklist. This will help ensure a thorough review of all associated compliance risks and licensing obligations.'}
2025-08-22 16:57:04 - back_end.services.chat_service - INFO - user_input: yes

2025-08-22 16:57:04 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.DEPENDENCY
2025-08-22 16:57:04 - back_end.services.chat_service - INFO - chat_service.process_user_input: Current status: toDependency, Updated status: toDependency
2025-08-22 16:57:04 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: toDependency -> toDependency
2025-08-22 16:57:04 - back_end.services.chat_service - INFO - chat_service.handle_nested: now the processing type in shared is: component
2025-08-22 16:57:04 - back_end.services.chat_service - INFO - chat_service.handle_nested: now we are handling license or component ItemType.COMPONENT
2025-08-22 16:57:04 - back_end.services.chat_manager - INFO - chat_manager: updated item status to confirmed
2025-08-22 16:57:04 - back_end.services.chat_service - WARNING - chat_service.handle_nested: we have found this messsage @ngrx/store 17.2.0 has been confirmed!

We have finished current checking!
2025-08-22 16:57:04 - back_end.services.chat_service - INFO - chat_service.handle_nested: we have finished the checking for this state toDependency
2025-08-22 16:57:04 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.DEPENDENCY
2025-08-22 16:57:04 - back_end.services.chat_flow - INFO - chat_flow.process: 状态转移: ConfirmationStatus.DEPENDENCY -> ConfirmationStatus.MAINLICENSE
2025-08-22 16:57:04 - back_end.services.state_handlers.object_handler - INFO - chat_flow.CredentialCheck: 依赖处理: 初始化了 1 个组件子任务
2025-08-22 16:57:04 - back_end.services.chat_service - INFO - Status check - Processing type: component, Item type: ItemType.COMPONENT, Status: toDependency -> main_license
2025-08-22 16:57:05 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': 'You are now at the stage of selecting the main license for your component. Please provide the list of licenses associated with your component so you can choose which one should be the main license.'}
2025-08-22 16:57:05 - back_end.services.chat_service - INFO - process_status_change: we need to get the instruction for the first item: main_license
2025-08-22 16:57:06 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': "I've recorded your component licenses: ['Apache-2.0', 'CC-BY-4.0', 'MIT']. Please select which should be the main license by number or name."}
2025-08-22 16:57:15 - back_end.server - INFO - server: before processing input, we are in the status of: main_license
2025-08-22 16:57:17 - utils.tools - INFO - we should have result like {'result': 'continue', 'talking': "You've selected Apache-2.0 as the main license. Is this correct?"}
2025-08-22 16:57:17 - back_end.services.chat_service - INFO - user_input: apache

2025-08-22 16:57:17 - back_end.services.chat_flow - INFO - chat_flow.process: 处理状态: ConfirmationStatus.MAINLICENSE
2025-08-22 16:57:17 - back_end.server - ERROR - Error during chat: 'NoneType' object has no attribute 'get'
Traceback (most recent call last):
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\server.py", line 212, in chat
    status, updated_shared, reply = chat_service.process_user_input(
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
        session["shared"],
        ^^^^^^^^^^^^^^^^^^
        chat_message.message,
        ^^^^^^^^^^^^^^^^^^^^^
        status
        ^^^^^^
    )
    ^
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\chat_service.py", line 47, in process_user_input
    updated_status = self.chat_flow.process(content).value
                     ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\chat_flow.py", line 148, in process
    event = handler.handle(context)
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\state_handlers\base_handler.py", line 139, in handle
    if self.check_all_subtasks_completed(context):
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\state_handlers\base_handler.py", line 164, in check_all_subtasks_completed
    return all(self.is_subtask_completed(context, task_id) for task_id in self.subtasks)
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\state_handlers\base_handler.py", line 164, in <genexpr>
    return all(self.is_subtask_completed(context, task_id) for task_id in self.subtasks)
               ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\services\state_handlers\object_handler.py", line 102, in is_subtask_completed
    components = get_items_from_context(context, ItemType.MAINLICENSE)
  File "C:\Users\z0054unn\Documents\Siemens-GitLab\Third-party\third-party-clearance\back_end\items_utils\item_utils.py", line 17, in get_items_from_context
    return context.get("shared", {}).get(items_key, [])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'get'
2025-08-22 16:57:17 - utils.tools - ERROR - Error CHAT_ERROR: Error during contract analysis: 'NoneType' object has no attribute 'get'
2025-08-22 17:00:15 - uvicorn.error - INFO - Shutting down
2025-08-22 17:00:15 - uvicorn.error - INFO - Waiting for application shutdown.
2025-08-22 17:00:15 - back_end.server - INFO - FastAPI应用关闭
2025-08-22 17:00:15 - uvicorn.error - INFO - Application shutdown complete.
2025-08-22 17:00:15 - uvicorn.error - INFO - Finished server process [3220]
